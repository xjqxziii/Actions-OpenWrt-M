#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: immortalwrt-r23.05-rax3000m-emmc

permissions: write-all
# 开启写权限，防止无法上传到release

on:
  repository_dispatch:
  schedule:
    - cron: 0 19 * * 0
    # 分,时,日,月,星期。每周日 19 时执行一次 (UTC时间)
  workflow_dispatch:
    inputs:
      USE_26MHZ:
        description: 'Use 26MHz max-frequency'
        required: true
        default: 'false'
        type: boolean

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-23.05
  TAG_NAME: v23.05.0-rc4
  DIY_FEEDS_SH: immortalwrt-rax3000m/scripts/diy_feeds_master.sh
  DIY_SH: immortalwrt-rax3000m/scripts/diy_master.sh
  CLASH_CORE: immortalwrt-rax3000m/scripts/preset-clash-core.sh
  CONFIG_FILE: immortalwrt-rax3000m/rax3000m-emmc.config
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - name: 检查
        uses: actions/checkout@main

      - name: 初始化环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          echo "USE_26MHZ=${{ github.event.inputs.USE_26MHZ }}" >> $GITHUB_ENV
          sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.eu.org/init_build_environment.sh)'
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: 检查空间使用情况
        if: (!cancelled())
        run: df -hT

      - name: 清理磁盘空间(Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # when set to "true" but frees about 6 GB
          tool-cache: true

          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: false
          dotnet: false
          haskell: false
          large-packages: false
          swap-storage: false

      - name: 检查空间使用情况
        if: (!cancelled())
        run: df -hT

      - name: 克隆源码
        working-directory: /workdir
        run: |
          git clone $REPO_URL --single-branch --filter=blob:none -b $REPO_BRANCH openwrt 
          cd openwrt && git checkout $TAG_NAME
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: 开启缓存
        uses: klever1988/cachewrtbuild@main
        with:
          ccache: 'true'
          mixkey: 'openwrt23-cortexa53'
          prefix: ${{ github.workspace }}/openwrt

      - name: 更新 & 安装 feeds & 执行脚本
        run: |
          cd openwrt
          chmod +x $GITHUB_WORKSPACE/$DIY_FEEDS_SH && $GITHUB_WORKSPACE/$DIY_FEEDS_SH
          ./scripts/feeds update -a && ./scripts/feeds install -a        
          chmod +x $GITHUB_WORKSPACE/$DIY_SH && $GITHUB_WORKSPACE/$DIY_SH

      - name: SSH链接管理
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: 导入补丁和配置 & 下载文件
        run: |
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          cd openwrt
          chmod +x $GITHUB_WORKSPACE/$CLASH_CORE && $GITHUB_WORKSPACE/$CLASH_CORE
          make defconfig
          make download -j8 V=10
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: 编译固件中
        id: compile
        run: |
          cd openwrt
          echo -e "$(($(nproc)+1)) thread compile"
          make -j$(($(nproc)+1)) || make -j$(nproc) || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 空间使用情况
        if: (!cancelled())
        run: df -hT

      - name: 上传 bin 目录
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: 整理文件
        id: organize
        if: steps.compile.outputs.status == 'success'
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 上传固件目录
        uses: actions/upload-artifact@main
        if: env.UPLOAD_FIRMWARE == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: 生成发布标签
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success' && !cancelled()
        run: |
          echo -e "✅ immortalwrt-master-SNAPSHOT-rax3000m-emmc" >> release.txt
          echo "release_tag=$(date +"%Y.%m.%d-23.05-rax3000m-emmc-master")" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 上传固件发布
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

      - name: 删除旧发布的固件
        uses: dev-drprasad/delete-older-releases@v0.2.1
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 7
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 删除过时工作流程
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 3
